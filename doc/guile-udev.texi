\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-udev.info
@documentencoding UTF-8
@settitle Guile-Udev Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-Udev version @value{VERSION}.

Copyright (C) 2020-2023 Artyom V. Poptsov @email{poptsov.artyom@@gmail.com}
Copyright (C) 2023 Maxim Cournoyer @email{maxim.cournoyer@@gmail.com}

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-Udev: (guile-udev).  Guile bindings to libudev.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-Udev Reference Manual
@subtitle For Guile-Udev @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-Udev Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installing as a system package::
* Installing from sources::
* Using this library before it is installed::
* API Reference::               Appendices
* Examples::
* GNU Free Documentation License::  The license of this manual.

Indices

* Type Index::
* Procedure Index::
* Concept Index::

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-Udev is a module that provides bindings to
@url{https://www.freedesktop.org/software/systemd/man/libudev.html, libudev}
for programs written in @url{https://www.gnu.org/software/guile/, GNU Guile}.

@node Installing as a system package
@chapter Installing as a system package

The @url{https://guix.gnu.org, GNU Guix} package manager, which can run on top
of any GNU(/Linux) distribution, offers a @code{guile-udev} package which can
be installed via:

@example
guix install guile-udev
@end example

@node Installing from sources
@chapter Installing from sources

Guile-Udev sources are available from GitHub at
@url{https://github.com/artyom-poptsov/guile-udev/}. This section describes
requirements of Guile-Udev and installation process.

Guile-Udev depends on the following packages:

@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.0
@item libudev
@end itemize

Alternatively, if you have GNU Guix installed, you can run:

@example
guix shell
@end example

After following the instructions displayed by the above command to authorize
automatically loading the @file{guix.scm} file at the root of the repository.

Get the sources of Guile-Udev from GitHub using Git (a good introduction to Git
is @url{https://git-scm.com/book/en/v2, Pro Git} book, which is available
online):

@example
$ git clone git@@github.com:artyom-poptsov/guile-udev.git
@end example

Configure the sources:

@example
$ cd guile-udev/
$ autoreconf -vif
$ ./configure
@end example

Build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node Using this library before it is installed
@chapter Using this library before it is installed

If you would like to test this Guile extension as you work on it, without
having to install it, you can use the @file{pre-inst-env} wrapper after having
configured and built the project, e.g.@:

@example
./pre-inst-env examples/device-listener.scm
@end example

@node API Reference
@chapter API Reference

@section Udev

These procedures are available from the module @code{(udev udev)}.

@deftp {Type} <udev>
A Guile representation of an Udev handle.
@end deftp

@deffn {Scheme Procedure} make-udev
Make and return an udev object.
@end deffn

@deffn {Scheme Procedure} udev? x
Check if @var{x} is an udev object. Return @code{#t} if it is, or @code{#f}
otherwise.
@end deffn

@section Monitor

Monitor object allows to scan for device events.  When an event occurs, the
monitor calls a specified callback.  Inside the scanner loop, the monitor
calls @code{select} procedure to check if any events available.  The
@code{select} timeout can be set by @code{udev-monitor-set-timeout!}
procedure.  By default, no timeout is used, which means the monitor will wait
forever for an event to be triggered.

@quotation note
The monitor scanner loops infinitely; that is, even when a timeout value is
used, the scanner will keep monitoring events, but will poll at the requested
period.  For maximum efficiency, it is recommended to not use a timeout and
let the underlying @code{select} system call indefinitely wait for an event.
@end quotation

These procedures are available from the module @code{(udev monitor)}.

@deftp {Type} <monitor>
A Guile representation of an Udev monitor handle.

Attributes:
@itemize
@item @code{udev}
Udev instance to which this monitor object belongs to.
@item @code{scanner-callback}
Monitor scanner callback which is called when an event is occurred.
@item @code{error-callback}
A callback that is called when an error is occurred.
@end itemize
@end deftp

@deffn {Scheme Procedure} %make-udev-monitor udev
Return a new udev monitor object for the given @var{udev} instance.
@end deffn

@deffn {Scheme Procedure} make-udev-monitor udev [keywords]
High-level procedure that creates an @var{udev} monitor object with the
parameters specified by keywords described below.

@table @samp
@item callback
A procedure to be called when an udev event occurs.  It gets applied to a
single argument, which is the @code{udev-device} object the event originated
from.

Expected type: procedure

Default value: @code{(const #f)}
@item filter
Udev event filter.

Expected type: a list with two elements: the first element is the subsystem
name, while the second element is the device type.  To match @emph{any} device
type, you may use @code{#f} instead of an actual device type.  If needed, more
filters can be installed via the @code{udev-monitor-add-filter!} procedure.

Default value: @code{#f}

Example:
@lisp
(make-udev-monitor udev #:filter (list "usb" "usb_device"))
@end lisp
@item timeout-sec
Optional timeout for 'select' call in the event listener.  This part of the
timeout is specified in seconds.

Expected type: Non-negative integer.

Default value: @code{#f}

Examples:

@lisp
(make-udev-monitor udev)   ;no timeout, most efficient
@end lisp

@lisp
(make-udev-monitor udev #:timeout-sec 3.33)  ;3.33 s poll period
@end lisp

@item timeout-usec
Optional timeout for 'select' call in the event listener, in microseconds.
The @var{timeout-sec} argument must be specified as well otherwise
@var{timeout-usec} is ignored.

Expected type: Non-negative integer.

Default value: @code{#f}

@lisp
(make-udev-monitor udev #:timeout-sec 0 #:timeout-usec 250)  ;250 us poll period
@end lisp
@end table

@end deffn

@deffn {Scheme Procedure} udev-monitor? x
Check if @var{x} is an udev-monitor object. Return @code{#t} if it is, or
@code{#f} otherwise.
@end deffn

@deffn {Scheme Procedure} udev-monitor-add-filter! udev-monitor subsystem [devtype]
Add a new filter for the events on @var{udev-monitor} that will trigger the
provided callback, for a device of type @var{devtype} belonging to the
@var{subsystem} subsystem.  @var{devtype} is optional; when omitted, devices
of @emph{any} type are matched.  This procedure must be called before starting
the scanning.
@end deffn

@deffn {Scheme Procedure} udev-monitor-remove-filters! udev-monitor
Remove all the filters that was set for @var{udev-monitor}. Throws
@code{guile-udev-error} on errors.
@end deffn

@deffn {Scheme Procedure} udev-monitor-set-timeout! udev-monitor [secs] [usecs]
Set the @var{udev-monitor} udev event polling timeout.  The @var{secs}
parameter must be a non-negative integer or float representing seconds, while
@var{usecs} must be a non-negative integer representing microseconds.  To
clear the timeout value, @var{secs} may be set to @code{#f} or omitted
entirely.
@end deffn

@deffn {Scheme Procedure} udev-monitor-set-callback! udev-monitor callback
Set the @var{udev-monitor} callback that will be called on each event that
pass the given filter.

The callback procedure will receive as the 1nd parameter an udev device
instance.
@end deffn

@deffn {Scheme Procedure} udev-monitor-set-error-callback! udev-monitor callback
Set the @var{udev-monitor} callback that will be called on UDev errors.

The callback procedure will receive as an udev device instance as the 1nd
parameter and an error message as the 2nd parameter.
@end deffn

@deffn {Scheme Procedure} udev-monitor-start-scanning! udev-monitor
Start the event scanning for the given @var{udev-monitor}.

In case of any errors in the scanner thread, an error callback will be called.
@end deffn

@deffn {Scheme Procedure} udev-monitor-stop-scanning! udev-monitor
Stop the event scanning for the given @var{udev-monitor}.
@end deffn

@deffn {Scheme Procedure} udev-monitor-get-udev udev-monitor
Return the parent udev object for an @var{udev-monitor}.
@end deffn

@section Device

These procedures are available from the module @code{(udev monitor)}.

@deftp {Type} <device>
A Guile representation of an Udev device handle.

Attributes:
@itemize
@item @code{udev}
Udev instance to which this device object belongs to.
@end itemize
@end deftp

@deffn {Scheme Procedure} udev-device? x
Check if @var{x} is an udev-device object. Return @code{#t} if it is, or
@code{#f} otherwise.
@end deffn

@deffn {Scheme Procedure} udev-device-get-action udev-device
Get the detected action for the @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-sysname udev-device
Get the @var{udev-device} system name as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-devpath udev-device
Get the device path of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-devnode udev-device
Get the device node of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-devtype udev-device
Get the device type of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-driver udev-device
Get the device driver of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-udev udev-device
Get the parent udev object of @var{udev-device}.
@end deffn

@deffn {Scheme Procedure} udev-device-get-property-value udev-device property
Get the value of a given @var{property} for @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-links udev-device
Get an alist of the @var{udev-device} links.
@end deffn

@deffn {Scheme Procedure} udev-device-get-properties udev-device
Get an alist of the @var{udev-device} properties.
@end deffn

@deffn {Scheme Procedure} udev-device-get-tags udev-device
Get an alist of the @var{udev-device} tags.
@end deffn

@section Hardware Database

Udev hardware database (HWDB) allows to make queries to the database using
modalias strings.

The procedures are defined in @code{(udev hwdb)} module.

@deftp {Type} <hwdb>
A Guile representation of an Udev hardware database handle.

Attributes:
@itemize
@item @code{udev}
Udev instance to which this hardware database object belongs to.
@end itemize
@end deftp

@deffn {Scheme Procedure} make-udev-hwdb
Return a new udev hardware database instance.
@end deffn

@deffn {Scheme Procedure} udev-hwdb-lookup hwdb modalias
Lookup a device matching @var{modalias} in the hardware database using the
given @var{hwdb} instance.

Usage example:
@lisp
(let* ((udev (make-udev))
       (hwdb (make-udev-hwdb udev)))
  (display (udev-hwdb-lookup hwdb "pci:v00008086d00001C2D*"))
  (newline))
@end lisp

@end deffn

@node Examples
@chapter Examples

Here's an example of a device listener that prints the device path of USB
devices that emit udev events:

@lisp
@verbatiminclude ../examples/device-listener.scm
@end lisp

To trigger USB events without actually inserting or removing USB devices into
your computer, you can use the @command{udevadm} command (provided by the
@code{eudev} package from Guix) @emph{as root}:

@example
# udevadm trigger --verbose --subsystem-match=usb
@end example

You can find the source of this example in the @file{examples} directory of
the project.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@include indices.texi

@bye
