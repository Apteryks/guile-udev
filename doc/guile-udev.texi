\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-udev.info
@documentencoding UTF-8
@settitle Guile-Udev Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-Udev version @value{VERSION}.

Copyright (C) 2020 Artyom V. Poptsov @email{poptsov.artyom@@gmail.com}
Copyright (C) 2023 Maxim Cournoyer @email{maxim.cournoyer@@gmail.com}

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-Udev: (guile-udev).  Guile bindings to libudev.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-Udev Reference Manual
@subtitle For Guile-Udev @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-Udev Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installing as a system package::
* Installing from sources::
* API Reference::               Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-Udev is a module that provides bindings to
@url{https://www.freedesktop.org/software/systemd/man/libudev.html, libudev}
for programs written in @url{https://www.gnu.org/software/guile/, GNU Guile}.

@node Installing as a system package
@chapter Installing as a system package

The @url{https://guix.gnu.org, GNU Guix} package manager, which can run on top
of any GNU(/Linux) distribution, offers a @code{guile-udev} package which can
be installed via:

@example
guix install guile-udev
@end example

@node Installing from sources
@chapter Installing from sources

Guile-Udev sources are available from GitHub at
@url{https://github.com/artyom-poptsov/guile-udev/}. This section describes
requirements of Guile-Udev and installation process.

Guile-Udev depends on the following packages:

@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.0
@item libudev
@end itemize

Alternatively, if you have GNU Guix installed, you can run:

@example
guix shell
@end example

After following the instructions displayed by the above command to authorize
automatically loading the @file{guix.scm} file at the root of the repository.

Get the sources of Guile-Udev from GitHub using Git (a good introduction to Git
is @url{https://git-scm.com/book/en/v2, Pro Git} book, which is available
online):

@example
$ git clone git@@github.com:artyom-poptsov/guile-udev.git
@end example

Configure the sources:

@example
$ cd guile-udev/
$ autoreconf -vif
$ ./configure
@end example

Build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

@section Udev

These procedures are available from the module @code{(udev udev)}.

@deffn {Scheme Procedure} make-udev
Make and return an udev object.
@end deffn

@deffn {Scheme Procedure} udev? x
Check if @var{x} is an udev object. Return @code{#t} if it is, or @code{#f}
otherwise.
@end deffn

@section Monitor

Monitor object allows to scan for device events.  When an event occurs, the
monitor calls a specified callback.  Inside the scanner loop, the monitor
calls @code{select} procedure to check if any events available.  The
@code{select} timeout can be set by @code{udev-monitor-set-timeout!}
procedure.  The timeout seconds and milliseconds parts are set to zero by
default.

These procedures are available from the module @code{(udev monitor)}.

@deffn {Scheme Procedure} %make-udev-monitor udev
Return a new udev monitor object for the given @var{udev} instance.
@end deffn

@deffn {Scheme Procedure} make-udev-monitor udev [keywords]
High-level procedure that creates an @var{udev} monitor object with the
parameters specified by keywords described below.

@table @samp
@item callback
A procedure to be called when an udev event occurs.  It gets applied to a
single argument, which is the @code{udev-device} object the event originated
from.

Expected type: procedure

Default value: @code{(const #f)}
@item filter
Udev event filter.

Expected type: a list with two elements: the 1st element is sybsystem name,
the 2nd element is device type

Default value: @code{#f}

Example:
@lisp
(make-udev-monitor udev #:filter (list "usb" "usb_device"))
@end lisp
@item timeout-sec
Timeout for 'select' call in the event listener.  This part of the timeout is
specified in seconds.

Expected type: Non-negative integer.

Default value: 0

Example:
@lisp
(make-udev-monitor udev #:timeout-sec 1)
@end lisp
@item timeout-usec
Timeout for 'select' call in the event listener.  This part of the timeout is
specified in milliseconds.

Expected type: Non-negative integer.

Default value: 0

Example:
@lisp
(make-udev-monitor udev #:timeout-usec 1)
@end lisp
@end table

@end deffn

@deffn {Scheme Procedure} udev-monitor? x
Check if @var{x} is an udev-monitor object. Return @code{#t} if it is, or
@code{#f} otherwise.
@end deffn

@deffn {Scheme Procedure} udev-monitor-add-filter! udev-monitor sybsystem devtype
Add a new filter for the events on @var{udev-monitor} that will trigger the
provided callback. This procedure must be called before starting the scanning.
@end deffn

@deffn {Scheme Procedure} udev-monitor-remove-filters! udev-monitor
Remove all the filters that was set for @var{udev-monitor}. Throws
@code{guile-udev-error} on errors.
@end deffn

@deffn {Scheme Procedure} udev-monitor-set-timeout! udev-monitor seconds milliseconds
Set the @var{udev-monitor} udev event polling timeout. The @var{seconds} and
@var{milliseconds} parameters must be integer numbers greater or equal to
zero.
@end deffn

@deffn {Scheme Procedure} udev-monitor-set-callback! udev-monitor callback
Set the @var{udev-monitor} callback that will be called on each event that
pass the given filter.

The callback procedure will receive as the 1nd parameter an udev device
instance.
@end deffn

@deffn {Scheme Procedure} udev-monitor-set-error-callback! udev-monitor callback
Set the @var{udev-monitor} callback that will be called on UDev errors.

The callback procedure will receive as an udev device instance as the 1nd
parameter and an error message as the 2nd parameter.
@end deffn

@deffn {Scheme Procedure} udev-monitor-start-scanning! udev-monitor
Start the event scanning for the given @var{udev-monitor}.

In case of any errors in the scanner thread, an error callback will be called.
@end deffn

@deffn {Scheme Procedure} udev-monitor-stop-scanning! udev-monitor
Stop the event scanning for the given @var{udev-monitor}.
@end deffn

@deffn {Scheme Procedure} udev-monitor-get-udev udev-monitor
Return the parent udev object for an @var{udev-monitor}.
@end deffn

@section Device

These procedures are available from the module @code{(udev monitor)}.

@deffn {Scheme Procedure} udev-device? x
Check if @var{x} is an udev-device object. Return @code{#t} if it is, or
@code{#f} otherwise.
@end deffn

@deffn {Scheme Procedure} udev-device-get-action udev-device
Get the detected action for the @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-sysname udev-device
Get the @var{udev-device} system name as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-devpath udev-device
Get the device path of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-devnode udev-device
Get the device node of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-devtype udev-device
Get the device type of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-driver udev-device
Get the device driver of @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-udev udev-device
Get the parent udev object of @var{udev-device}.
@end deffn

@deffn {Scheme Procedure} udev-device-get-property-value udev-device property
Get the value of a given @var{property} for @var{udev-device} as a string.
@end deffn

@deffn {Scheme Procedure} udev-device-get-links udev-device
Get an alist of the @var{udev-device} links.
@end deffn

@deffn {Scheme Procedure} udev-device-get-properties udev-device
Get an alist of the @var{udev-device} properties.
@end deffn

@deffn {Scheme Procedure} udev-device-get-tags udev-device
Get an alist of the @var{udev-device} tags.
@end deffn

@section Hardware Database

Udev hardware database (HWDB) allows to make queries to the database using
modalias strings.

The procedures are defined in @code{(udev hwdb)} module.

@deffn {Scheme Procedure} make-udev-hwdb
Return a new udev hardware database instance.
@end deffn

@deffn {Scheme Procedure} udev-hwdb-lookup hwdb modalias
Lookup a device matching @var{modalias} in the hardware database using the
given @var{hwdb} instance.

Usage example:
@lisp
(let* ((udev (make-udev))
       (hwdb (make-udev-hwdb udev)))
  (display (udev-hwdb-lookup hwdb "pci:v00008086d00001C2D*"))
  (newline))
@end lisp

@end deffn

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
